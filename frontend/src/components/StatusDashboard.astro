---
// Component script goes here
---
<div class="dashboard">
  <h2 class="text-2xl font-bold mb-4">Website Status</h2>
  <div id="status-list">
    <p>Loading status...</p>
  </div>
  <div class="pagination">
    <button id="prev-btn" disabled>&laquo; Previous</button>
    <span id="page-info">Page 1 of 1</span>
    <button id="next-btn" disabled>Next &raquo;</button>
  </div>
</div>

<style>
	.dashboard {
		background-color: #23262d;
		border: 1px solid #444;
		padding: 1.5rem;
		border-radius: 0.5rem;
	}
	.status-item {
		display: flex;
		justify-content: flex-start; /* Align items to the start */
		align-items: center;
		padding: 0.75rem 0;
		border-bottom: 1px solid #333;
	   gap: 0.75rem; /* Add gap between icon and URL */
	}
	.status-item:last-child {
		border-bottom: none;
	}
	.status-up {
		color: #4ade80; /* green-400 */
		font-weight: bold;
	}
	.status-down {
		color: #f87171; /* red-400 */
		font-weight: bold;
	}

	 .pagination {
	   display: flex;
	   justify-content: space-between;
	   align-items: center;
	   margin-top: 1rem;
	 }
	 .pagination button {
	   background-color: #333;
	   color: white;
	   border: 1px solid #555;
	   padding: 0.5rem 1rem;
	   border-radius: 0.25rem;
	   cursor: pointer;
	 }
	 .pagination button:disabled {
	   background-color: #222;
	   color: #777;
	   cursor: not-allowed;
	 }
</style>

<script>
	 const statusList = document.getElementById('status-list');
	 const prevBtn = document.getElementById('prev-btn') as HTMLButtonElement;
	 const nextBtn = document.getElementById('next-btn') as HTMLButtonElement;
	 const pageInfo = document.getElementById('page-info');

	 let currentPage = 1;
	 let totalPages = 1;

	 type StatusEntry = {
	   url: string;
	   status: 'up' | 'down';
	 };

	 type PaginatedResponse = {
	   totalPages: number;
	   currentPage: number;
	   data: StatusEntry[];
	 };

	 async function fetchStatus() {
	   if (!statusList || !pageInfo) return;

	   try {
	     const response = await fetch(`http://localhost:8080/status?page=${currentPage}&limit=10`);
	     if (!response.ok) {
	       throw new Error(`HTTP error! status: ${response.status}`);
	     }
	     const responseData: PaginatedResponse = await response.json();
	     
	     statusList.innerHTML = ''; // Clear loading message
	     
	     totalPages = responseData.totalPages;
	     currentPage = responseData.currentPage;
	     pageInfo.textContent = `Page ${currentPage} of ${totalPages}`;

	     if (responseData.data.length === 0) {
	       statusList.innerHTML = '<p>No websites are being monitored yet.</p>';
	       return;
	     }

	     for (const { url, status } of responseData.data) {
	       const item = document.createElement('div');
	       item.className = 'status-item';
	       
	       const statusIcon = document.createElement('span');
	       statusIcon.textContent = status === 'up' ? 'ðŸŸ¢' : 'ðŸ”´';
	       statusIcon.className = 'status-icon';

	       const urlSpan = document.createElement('span');
	       urlSpan.textContent = url;

	       item.appendChild(statusIcon);
	       item.appendChild(urlSpan);
	       statusList.appendChild(item);
	     }

	     updatePaginationButtons();

	   } catch (error) {
	     statusList.innerHTML = `<p class="status-down">Error fetching status: Could not connect to the backend. Is it running?</p>`;
	     console.error('Fetch error:', error);
	   }
	 }

	 function updatePaginationButtons() {
	   prevBtn.disabled = currentPage <= 1;
	   nextBtn.disabled = currentPage >= totalPages;
	 }

	 prevBtn.addEventListener('click', () => {
	   if (currentPage > 1) {
	     currentPage--;
	     fetchStatus();
	   }
	 });

	 nextBtn.addEventListener('click', () => {
	   if (currentPage < totalPages) {
	     currentPage++;
	     fetchStatus();
	   }
	 });

	 // Fetch status on page load and then every 30 seconds
	 fetchStatus();
	 setInterval(fetchStatus, 30000);
</script>